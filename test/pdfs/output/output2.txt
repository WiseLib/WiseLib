  The Impact of If-Conversion and Branch Prediction on Program Execution
                     on the Intel® Itanium™ Processor

                      Youngsoo Choi, Allan Knies, Luke Gerke, Tin-Fook Ngai
                                   Intel Corporation, MS SC12-304
                                      2200 Mission College Blvd
                                        Santa Clara, CA 95052
                  {youngsoo.choi, allan.knies, luke.c.gerke, tin-fook.ngai}@intel.com

                                                                conversion, and how inherent program control-flow
                       Abstract                                 characteristics affect if-conversion.
                                                                    Although this study is limited only to impact of if-
     The research community has studied if-conversion           conversion, predication has a number of other possible
for many years. However, due to the lack of existing            uses. For example, external studies [15] and our own
hardware, studies were conducted by simulating code             internal work have shown that floating-point (FP)
generated by experimental compilers. This paper
presents the first comprehensive study of the use of            codes improve by about 35% when software
predication to implement if-conversion on production            pipelining is used. Other studies have shown that code
hardware with a near-production compiler. To better             layout has substantial impact on instruction cache
understand trends in the measurements, we generated             (Icache) optimization, but none have directly
binaries at three increasing levels of if-conversion            addressed how predication might be used to improve
aggressiveness. For each level, we gathered data                instruction stream behavior beyond that provided by
regarding the global runtime effects of if-conversion           branch removal. Our results indicate that there is
on overall execution time, register pressure, code size,
and branch behavior. Furthermore, we studied the                potential for optimization of the instruction stream by
inherent characteristics of program control-flow                using predication, although we do not have sufficient
structure related to branching to help determine                data to draw well-founded conclusions in this area.
fundamental limits of if-conversion. Our results show           While control and data speculation in the Itanium
that on the Itanium™ processor if-conversion could              instruction set provide great freedom to compilers,
potentially remove 29% of the branch mispredictions             non-speculative operations such as stores, checks, and
in SPEC2000CINT but that this accounts for a
substantially smaller overall program speedup than              some condition computations are difficult to move. In
previously reported.                                            each of these cases, predication can contribute to the
                                                                overall performance of an application. While all of
                                                                these techniques are promising, in this paper, we
                                                                concentrate only on the use of if-conversion and its
1. Introduction                                                 impact on removing branches and their mispredictions.
    Although the research community has investigated                Rather than focusing only on compile-time static
predicated execution for many years, due to the lack of         measurements or only on run-time dynamic
real hardware to validate their research results, studies       measurements, we have developed a methodology that
were confined to using processor simulators running             allows us to link consequences of decisions made at
binaries generated by experimental compilers (often             compilation time with execution behavior. Runtime
running without any operating system layer). The                behavior was measured by using the Itanium
recent introduction of the Itanium™ processor and               processor’s performance monitors, while compile-time
associated production software environment provides             information was stored as annotations in the program
the first opportunity to perform new analysis of if-            executable.
conversion under production constraints.                            In Section 2, we give a brief summary of prior
    This paper presents the first comprehensive study           work in the area of predication and related compiler
of the use of predication to implement if-conversion            technology. Section 3 describes the experimental
on general-purpose production hardware and software.            setup used in our study. Experimental results are
We examine three basic effects of if-conversion: the            presented in two sections: Section 4 gives our program
impact of if-conversion on code size, register pressure,        measurements across benchmarks and compiler
and branch behavior on the Itanium processor,                   settings, and Section 5 shows our analysis of how the
limitations of our compiler in performing if-                   inherent control-flow properties of the benchmarks
                                                                impact the effectiveness of if-conversion.


                                                            1
,2. Comparison to Related Work                                   optimizations (such as instruction promotion and
                                                                merging) can be applied to increase ILP in the
    Predicated execution has been extensively studied           predicated block [6, 7].
[4, 5, 6, 7, 8, 9, 10, 11, 13, 20]. In architectures that           Havanki, et. al. [14] proposed a non-linear region
support predicated execution, instructions can be               structure called a treegion that can be used to take
tagged with a guarding predicate. Instructions whose            advantage of predication.
predicate is true execute as though they are not
predicated; instructions whose predicate is false               2.4 Reduction of Branches and Branch
execute as NOP instructions.           The process of           Mispredictions via Predicated Execution
converting sequences of instructions with conditional
                                                                    One major benefit of if-conversion comes from the
branches into predicated operations is known as if-
                                                                elimination of hard-to-predict branches. Malhke et. al.
conversion [22].
                                                                [4] studied the impact of if-conversion on branch
2.1 Architectural Support for Predicated                        prediction. It was shown that an average of 27% of
Execution                                                       branches and 56% of mispredictions were eliminated
                                                                at runtime with if-conversion over a mix of SPEC92
    Architectural support of predicated execution can           benchmarks and UNIX utilities.         Branches were
be traced back to vector mask operations in vector              categorized according to their types (conditional or
machines [21], the select instruction in Multiflow              unconditional, calls or returns), loop and non-loop
Trace [19], and restricted predicated instructions in           related, and locations (in inner loop, outer loop, or
early superscalar architectures such as the conditional         straight-line code) and their impact on branch
move instruction in DEC/Compaq Alpha and SUN                    prediction was studied. Our study confirms that if-
SPARC V9 and nullifying instructions in HP PA-                  conversion can provide a very substantial removal in
RISC. These architectures only partially support                branches and mispredictions on SPEC2000CINT.
predication through special instructions or in special          However, our study also includes a correlation with
cases. The Cydra 5 was the first wide-issue machine             the fundamental structure of control dependences in
that fully supported predicated execution [18]. Its             addition to branch types.
single-bit iteration control registers could be used to             Tyson [9] analyzed branch elimination using
predicate any instruction within a loop. Today, the             different predication models and their impact on
Itanium instruction set architecture is the only general-       branch prediction schemes. A reduction of up to 30%
purpose architecture that fully supports predication [1]        in the misprediction rate in several branch prediction
with 64 individually addressable predicate registers            schemes was reported. In order to identify hard-to-
and a wide variety of predicate-computing                       predict branches, Mantripragada and Nicolau [5]
instructions.                                                   proposed using data from branch profiling combined
2.2 Use of Predicates in Software Pipelining                    with block sizes and schedule lengths, to selectively
                                                                perform if-conversion. Their simulations were based
    In [15, 16], predication was demonstrated to be an          on an ISA with partial predicate support on a 4-issue
important feature to help support software pipelining           out-of-order processor and showed a reduction of
(SWP) of loops.       In addition to removing control           misprediction rate from 1.2% to 55% and cycle
dependencies, stage predicates allow the loop kernel to         speedup from 0.5% to 15.2% on SPECint95
be filled and drained without the use of explicit               benchmarks.
prologs and epilogs.       The Itanium instruction set
architecture also supports rotating registers, further          2.5 Performance of Predicated Execution
increasing the efficiency of SWP. Warter et. al.                    Past research studies have shown significant
showed that software pipelined loops performed 34%              application performance improvement due to
faster on average with predication than without [15].           predication. Based on emulation-driven simulation,
Our own experience has shown similar results.                   Malhke et.al. [8] reported an average speedup of 63%
2.3 Compilation of Predicated Code                              (35%) of full predicated execution over non-
                                                                predicated superblock scheduling for a mix of SPEC92
   To gain performance enhancements from                        and UNIX utilities on an 8-issue processor that can
predication, different compilation technologies are             retire/predict 1(2)-branch(es) per cycle. In the same
required. The Illinois IMPACT group proposed the                paper, predication was shown to be able to reduce the
hyperblock structure for predicated execution [6]. A            number of branches and mispredicted branches by
hyperblock is a single-entry multiple-exit region that          57% and 38%, respectively.
gives a larger scheduling region than a basic block or              An average speedup of 30% by predication alone
a superblock. After instructions from multiple paths            was reported more recently [7] for a slightly different
are if-converted into a single block, additional                mix of SPEC92, SPEC95 and UNIX utilities


                                                            2
,benchmarks on a different machine configuration.               3. Experimental Setup and Methodology
The processor used profile-based static branch
prediction and had a 6-cycle branch misprediction              3.1 Platform
penalty.       Their cycle estimates were taken by
profiling execution, multiplying block execution                   Our experiments were run on a single C0-step
counts by compiler-generated expected cycle counts,            Intel® Itanium™ processor running at 733 Mhz using
and then adding cache and exception effects from a             the 460GX chipset and 1 GB of main memory. The
simulator.                                                     Itanium processor can issue up to six instruction slots
    Our performance results differ substantially from          per cycle and has two load/store units, four general-
these earlier works due to a number of differences in          purpose ALUs, three branch units (and can perform
experimental conditions. In the remainder of this              three branch predictions per clock), and two 82-bit
section, we describe the major factors accounting for          floating-point multiply accumulate units (FMAC).
the difference in results.                                     The first level instruction and data caches are 16 KB,
    First, the region size used by the compilers in the        4-way set associative. The second level cache is 96KB
past studies was improved when if-conversion was               unified, 6-way set associative and the third level cache
allowed. This means that the compiler had a greater            is 4MB, 4-way set associative. A more complete
scheduling window from which instructions are                  description of the Itanium processor micro-
chosen to schedule when if-conversion was enabled              architecture is available in [2].
than when it was disabled.           In our compiler,
                                                               3.2 Compiler
instructions are moved and scheduled in regions with
arbitrary acyclic control flow.        Region size is              The executables used in our performance runs
determined independently from whether if-conversion            were built using a near-production version of Intel's
is enabled or not.                                             product Itanium architecture compiler, ECC.
    Second, most of the previous studies used equal [7]        Enhancements were made that allowed us to adjust the
or greater [8] execution resources than what the               heuristics used when making if-conversion decisions
Itanium processor provides except for the number of            and to insert annotations into the generated binaries.
branch units and the complexity of their predictors.           The compiler was otherwise unmodified.
Thus, those studies had fewer execution resource                   In ECC, predicate generation, along with all
conflicts (making if-conversion easier), but higher            predicate-aware optimization, is done in the code
contention for branch units (making if-conversion              generator. If-conversion is performed immediately
more valuable). The results [8] showed that going              after software pipelining (when it is enabled) and
from 1 to 2 branch units substantially reduced the             immediately before global code scheduling. Potential
performance gained from predication (almost by half).          candidates for predication are acyclic single-entry
Since the Itanium processor has 3 branch units, this           regions, excluding those that contain architecturally
affect is further magnified.                                   unpredicatable instructions or indirect branches.
    Third, our results were gathered on a real hardware        Compile-time and code-size considerations limit our
that has TLB misses, pipeline flushes, cache                   searches to regions with reasonable size. However,
contention, and OS overhead. In [8], such exceptions           once a region is if-converted the resultant block is
were assumed to be deferred when they were not                 considered for if-conversion with surrounding blocks,
necessary. Since our system cannot always do this,             effectively allowing if-conversion of large regions.
our overhead due to these non-branch related activities            Predicate relationships are established through
is higher, and thus, benefits from better schedules and        evaluation of the control flow graph and represented
elimination of mispredicted branches account for a             as a Predicate Partition Graph [17] for use by
proportionally smaller percent of the total execution          downstream phases. The heuristics used to decide
time.                                                          whether to if-convert are based on a number of factors
    Finally, the difference in benchmarks and the              including:      dependence height, resource height,
subsequent change in execution profile from past               estimated misprediction rates, and edge profile
studies contributes to a different percent of time spent       information.
on branch processing. In SPEC2000CINT on the                       The compiler performs global code motion using
Itanium processor, we see approximately only 7% of             Wavefront Scheduling [12]. The scheduling regions
cycles spent servicing branch mispredictions.                  allow arbitrary acyclic control flow, and are thus not
                                                               directly impacted by the presence or absence of
                                                               upstream if-conversion. Even in the absence of if-
                                                               conversion, the compiler assigns predicates to blocks
                                                               that may be used by the code scheduler to perform




                                                           3
,upward and downward code motion. The register                  million samples. The sampling does not significantly
allocator removes unused predicates later.                     impact program execution as the overhead was
    The register allocator is currently only partially         generally less than 3%.
predicate-aware. In particular, the register lifetime of
a virtual register used inside a loop and defined under        3.5 Benchmark Runs
a predicate is conservatively thought to extend upward             All     experiments      were     run    using   the
beyond its predicated definition.                              SPEC2000CINT benchmarks under compiler options
3.3 Annotations                                                compliant with SPEC “BASE” setting rules. All runs
                                                               were performed with the reference input set. Our base
    Our compiler has been modified to emit compile-            settings included profile-guided optimization using
time information about specific functions, basic               execution traces from the training set, whole program
blocks, and instructions into an annotation segment of         inter-procedural optimization, and function inlining.
the binary [3]. These annotations are kept in a non-           Three versions of each integer benchmark were built
loadable segment of the binary and have no impact on           to provide three degrees of if-conversion
the actual executable code generated by the compiler.          aggressiveness: No if-conversion (NONE), default
Post-processing tools were developed to read the               level of if-conversion (DEF), and complete if-
annotations from the binary and associate the                  conversion wherever possible (MAX). This
information with dynamic event data collected by the           classification is based on the if-conversion heuristics
Itanium processor’s performance monitors at runtime.           described in Section 3.2. The NONE level disallows
    The compiler used this annotation section to record        if-conversion entirely, the DEF level allows the
program information related to heuristic decisions             compiler to if-convert where it seems profitable
made by the if-converter as well as to tag branch              according to heuristics, and the MAX level if-converts
types. Each branch is tagged with a type such as loop-         every region that the region-constructor creates,
back, early loop-exit, call-type, IP-relative, indirect,       regardless of profitability. (Note that due to the
and controlling single/multiple-entry/exit acyclic             compilation resource requirements at the MAX level,
regions. These per-instruction records, used together          we were unable to generate a functional MAX binary
with per-instruction runtime event information, allow          for gcc, so the result is missing in our graphs.)
us to relate low-level runtime event counts to higher-             The DEF level has been tuned to maximize the
level program and branch characteristics. In Section           average performance of applications, other levels were
5, this technique is used to characterize branches             expected (and indeed) generally resulted in slower
according to their control-flow properties and their           binaries regardless of the amount of if-conversion
architectural branch types.                                    performed. The MAX level binaries were produced to
                                                               help us understand how aggressive if-conversion
3.4 Event sampling                                             changes control flow structure and associated program
    Each binary was run multiple times to record               characteristics, rather than to improve performance.
information from hardware performance counters.                    As mentioned in Section 2.2, predicates can be
These counters track a wide variety of basic events,           used effectively in software pipelining (SWP). In
such as instructions retired, cycles, and branches             order to focus on the use of predication in if-
retired. The monitors are highly configurable (see [1],        conversion, we turned off SWP in the compiler so that
Volume 4) to allow the user to collect event                   measurements taken on predicated code only include
information based on instruction opcode, memory                affects from if-conversion, rather than from SWP
reference address, process privilege level, and other          stage predicates. Although SWP is turned off in our
criteria. The Itanium processor also supports event-           experiments, the compiler still if-converts code within
based sampling through the use of event address                loops. In SPEC2000CINT, the time spent in loops that
registers (EARs).                                              can be software pipelined is very small and thus the
    When using EARs, it is possible to specify the             performance benefit for using this feature is less than
number of times an event occurs before a sample is             1% on SPEC2000CINT (although for SPEC200FP, the
taken (sampling ratio). When the specified number of           benefit is greater than 30%).
events has occurred, the IP of the instruction causing
that event is recorded as well as event-specific data,
the performance monitors are frozen, and an external
                                                               4. Experimental Results – Basic Data
interrupt is raised. After the interrupt handler records          In this section, we present data and analysis
all relevant information, monitors are unfrozen, and           regarding if-conversion and its impact on general
execution continues. In this study, we collected branch        program behavior using binaries compiled at NONE,
event samples and the sampling thresholds were                 DEF, and MAX aggressiveness levels. The following
adjusted so that each benchmark had approximately 4            subsections describe the basic program runtime


                                                           4
,behavior based on static and dynamic measures and                                                                           in the highest performance, although there are some
discuss the corresponding microarchitecture and                                                                             variations between benchmarks. On average, the DEF
compiler issues.                                                                                                            if-conversion level was 2% faster than the NONE
                                                                                                                            binaries, while the MAX if-conversion level was 14%
4.1 Total Execution Time                                                                                                    slower than NONE. The remainder of this section
                                                              NONE binary (No if-conversion)                                discusses related effects and analyzes whether these
                                             CPU Cycle % Cycle spent         Instructions      NOPs                         effects can be improved by changes in
  Benchmark                                                                                               Effective
                                               count    servicing branch        retired        retired
                                                                                                            IPC             microarchitecture or compiler technology.
                                              (million)  misprediction         (million)      (million)

164.gzip                                       386,814               9.37%         540,344     162,999           0.98
                                                                                                                            4.2 Instruction Access Behavior
175.vpr                                        381,289               6.66%         295,576      95,235           0.53           Because code size and code layout can have subtle
176.gcc                                        237,116               7.52%         241,071      56,858           0.78       effects on program performance, we use three metrics
181.mcf                                        493,147               1.34%         105,825      29,010           0.16       to characterize the effect of if-conversion on the
186.crafty                                     206,538               9.82%         224,410      46,155           0.86       instruction stream: dynamic count of retired
197.parser                                     489,667               8.52%         495,401     136,084           0.73
                                                                                                                            instructions (including nops and predicated-off
252.eon                                        242,004               6.46%         316,048      99,284           0.90
                                                                                                                            instructions), static instruction count (number of
253.perlbmk                                    378,016               8.21%         572,988     150,717           1.12
                                                                                                                            instructions in the binary including nops), and the
254.gap                                        293,162               3.93%         335,921      83,601           0.86
                                                                                                                            number of first level instruction (L1I) cache misses.
255.vortex                                     266,340               1.16%         365,243      80,857           1.07
                                                                                                                                The number of instructions retired at runtime
256.bzip2                                      341,874               8.98%         388,623      87,176           0.88
                                                                                                                            indicates the minimum bandwidth required between
300.twolf                                      622,937           11.28%            498,668     166,575           0.53
                                                                                                                            the L1I cache and the execution units. Figure 2 shows
AVERAGE                                        361,575               7.15%         365,010      99,546           0.78
                                                                                                                            that the number of instructions retired increases with
  Table 1. Basic statistics for binaries with no if-
                conversion (NONE)                                                                                           more aggressive if-conversion. This is not surprising
                                                                                                                            because the more aggressively if-conversion is
                                                                                                                            applied, the more instructions from secondary control
                                                               CPU cycle count               NONE   DEF    MAX
                                                              1.44               1.59
                                                                                                                            paths are sent down the execution pipe (and later
  Ratio to NONE if-conversion level




                                      1.20
                                      1.15
                                                                                                                            squashed).
                                      1.10
                                                                                                                                                                                                        Number of instructions retired         NONE   DEF   MAX
                                      1.05
                                                                                                                                                                                                                1.63         1.33
                                                                                                                                                      Ratio to NONE if-conversion level




                                      1.00                                                                                                                                                  1.30
                                      0.95                                                                                                                                                  1.25
                                      0.90                                                                                                                                                  1.20
                                      0.85                                                                                                                                                  1.15
                                      0.80                                                                                                                                                  1.10
                                                                                                                                                                                            1.05
                                                        r
                                                      ip




                                                      er

                                                       n




                                                       p

                                                       x

                                                       2
                                                       c




                                                       E
                                                      cf

                                                      ty




                                                       k




                                                       f
                                                    vp




                                                     ol
                                                    gc




                                                   ga

                                                   rte
                                                   eo




                                                    ip
                                                    m




                                                 AG
                                                  gz




                                                   rs
                                                   m

                                                   af




                                                 tw
                                                 bz
                                                 5.




                                                                                                                                                                                            1.00
                                                rlb
                                                 6.




                                                 2.




                                                 4.
                                                pa




                                               vo
                                                1.

                                                cr
                                                4.

                                              17




                                             ER
                                              0.
                                             17




                                             25




                                             25




                                              6.
                                             18

                                             6.




                                            pe
                                             7.
                                      16




                                             5.



                                          30
                                          25
                                          18

                                         19




                                         25




                                        AV
                                          3.




                                                                                                                                                                                            0.95
                                       25




                                                                                                                                                                                            0.90


 Figure 1. Relative CPU cycle count (NONE = 1.0)
                                                                                                                                                                                                                r
                                                                                                                                                                                                              ip




                                                                                                                                                                                                              er

                                                                                                                                                                                                               n




                                                                                                                                                                                                               p

                                                                                                                                                                                                               x

                                                                                                                                                                                                               2
                                                                                                                                                                                                               c




                                                                                                                                                                                                               E
                                                                                                                                                                                                              cf

                                                                                                                                                                                                 19 fty




                                                                                                                                                                                                               k




                                                                                                                                                                                                               f
                                                                                                                                                                                                            vp




                                                                                                                                                                                                             ol
                                                                                                                                                                                                            gc




                                                                                                                                                                                                           ga

                                                                                                                                                                                                           rte
                                                                                                                                                                                                           eo




                                                                                                                                                                                                            ip
                                                                                                                                                                                                            m




                                                                                                                                                                                                         AG
                                                                                                                                                                                                          gz




                                                                                                                                                                                                           rs
                                                                                                                                                                                                           m




                                                                                                                                                                                                         tw
                                                                                                                                                                                                           a




                                                                                                                                                                                                         bz
                                                                                                                                                                                                         5.




                                                                                                                                                                                                        rlb
                                                                                                                                                                                                         6.




                                                                                                                                                                                                         2.




                                                                                                                                                                                                         4.
                                                                                                                                                                                                        pa




                                                                                                                                                                                                       vo
                                                                                                                                                                                                        1.

                                                                                                                                                                                                        cr
                                                                                                                                                                                                        4.

                                                                                                                                                                                                      17




                                                                                                                                                                                                     ER
                                                                                                                                                                                                      0.
                                                                                                                                                                                                     17




                                                                                                                                                                                                     25




                                                                                                                                                                                                     25




                                                                                                                                                                                                      6.
                                                                                                                                                                                                     18

                                                                                                                                                                                                     6.




                                                                                                                                                                                                    pe
                                                                                                                                                                                                     7.
                                                                                                                                                                                           16




                                                                                                                                                                                                     5.



                                                                                                                                                                                                  30
                                                                                                                                                                                                  25
                                                                                                                                                                                                  18




                                                                                                                                                                                                 25




                                                                                                                                                                                                AV
                                                                                                                                                                                                  3.
                                                                                                                                                                                               25




    Table 1 shows the total number of execution cycles
for the NONE binaries and the estimated percent of                                                                           Figure 2. Relative number of instructions retired
time spent in servicing branch mispredictions. Since                                                                                           (NONE = 1.0)
the cycle numbers reported are measured on near-
production silicon with near-production compiler                                                                                                                                                   Static number of bundles in assembly code   NONE   DEF   MAX
                                                                                                                              Ratio to NONE if-conversion level




technology, performance will be somewhat lower than                                                                                                                                       1.05


what one would expect on a system available by the                                                                                                                                        1.00


time this paper is published.                                                                                                                                                             0.95


    Figure 1 shows the CPU cycle counts of other if-                                                                                                                                      0.90

conversion levels relative to those of the NONE                                                                                                                                           0.85

binaries given in Table 1. Although we report overall                                                                                                                                     0.80

performance at different levels of if-conversion
                                                                                                                                                                                                            r
                                                                                                                                                                                                          ip




                                                                                                                                                                                                          er

                                                                                                                                                                                                           n




                                                                                                                                                                                                           p

                                                                                                                                                                                                           x

                                                                                                                                                                                                           2
                                                                                                                                                                                                           c




                                                                                                                                                                                                           E
                                                                                                                                                                                                          cf

                                                                                                                                                                                                          ty




                                                                                                                                                                                                           k




                                                                                                                                                                                                           f
                                                                                                                                                                                                        vp




                                                                                                                                                                                                         ol
                                                                                                                                                                                                        gc




                                                                                                                                                                                                       ga

                                                                                                                                                                                                       rte
                                                                                                                                                                                                       eo




                                                                                                                                                                                                        ip
                                                                                                                                                                                                        m




                                                                                                                                                                                                     AG
                                                                                                                                                                                                      gz




                                                                                                                                                                                                       rs
                                                                                                                                                                                                       m

                                                                                                                                                                                                       af




                                                                                                                                                                                                     tw
                                                                                                                                                                                                     bz
                                                                                                                                                                                                     5.




                                                                                                                                                                                                    rlb
                                                                                                                                                                                                     6.




                                                                                                                                                                                                     2.




                                                                                                                                                                                                     4.
                                                                                                                                                                                                    pa




aggressiveness, the focus of our study is to understand
                                                                                                                                                                                                   vo
                                                                                                                                                                                                    1.

                                                                                                                                                                                                    cr
                                                                                                                                                                                                    4.

                                                                                                                                                                                                  17




                                                                                                                                                                                                 ER
                                                                                                                                                                                                  0.
                                                                                                                                                                                                 17




                                                                                                                                                                                                 25




                                                                                                                                                                                                 25




                                                                                                                                                                                                  6.
                                                                                                                                                                                                 18

                                                                                                                                                                                                 6.




                                                                                                                                                                                                pe
                                                                                                                                                                                                 7.
                                                                                                                                                                                          16




                                                                                                                                                                                                 5.




                                                                                                                                                                                              30
                                                                                                                                                                                              25
                                                                                                                                                                                              18

                                                                                                                                                                                             19




                                                                                                                                                                                             25




                                                                                                                                                                                            AV
                                                                                                                                                                                              3.
                                                                                                                                                                                           25




the fundamental issues that arise from if-conversion
rather than whether a given compilation parameter                                                                             Figure 3. Relative static bundle count changes
increases or decreases performance.                                                                                                             (NONE=1.0)
    Figure 1 shows that more if-conversion does not
necessarily lead to increased performance. As                                                                                  Figure 3 shows the static instruction counts for
expected, the DEF if-conversion level usually results                                                                       each binary. The static instruction count is an


                                                                                                                        5
,important measure because it contributes to the load                                                       program’s execution path via if-conversion. Note that,
time of the binary, the amount of disk space required                                                      although the MAX level shows 19% more branches on
for its storage, and is generally an indirect contributor                                                  average, the number is skewed by perlbmk and crafty.
to instruction TLB (ITLB) misses. The code size of
DEF and MAX binaries are 1% and 5% smaller,                                                                                                                                             Number of branches retired
                                                                                                                                                                                                                            NONE        DEF    MAX
respectively, than that of NONE binaries. The static                                                                                                                                                            2.62




                                                                                                              Ratio to NONE if-conversion level
                                                                                                                                                             1.30
code size always decreases with increasing predication                                                                                                       1.20
due to reduction in the number of branches and nops.                                                                                                         1.10

Nops are decreased because fewer branches, labels,                                                                                                           1.00


and higher ILP provides the compiler with greater                                                                                                            0.90

                                                                                                                                                             0.80
freedom in bundling instructions.                                                                                                                            0.70

    The last measure of the impact of code size is the                                                                                                       0.60

number of first level instruction (L1I) cache misses




                                                                                                                                                                               r
                                                                                                                                                                             ip




                                                                                                                                                                             er

                                                                                                                                                                               n




                                                                                                                                                                               p

                                                                                                                                                                               x

                                                                                                                                                                               2
                                                                                                                                                                               c




                                                                                                                                                                              E
                                                                                                                                                                             cf

                                                                                                                                                                              y




                                                                                                                                                                              k




                                                                                                                                                                               f
                                                                                                                                                                           vp




                                                                                                                                                                            ol
                                                                                                                                                                           gc




                                                                                                                                                                          ga

                                                                                                                                                                          rte
                                                                                                                                                                          eo




                                                                                                                                                                           ip
                                                                                                                                                                             t




                                                                                                                                                                           m




                                                                                                                                                                        AG
                                                                                                                                                                         gz




                                                                                                                                                                          rs
                                                                                                                                                                          m

                                                                                                                                                                          af




                                                                                                                                                                        tw
                                                                                                                                                                        bz
                                                                                                                                                                        5.




                                                                                                                                                                       rlb
                                                                                                                                                                        6.




                                                                                                                                                                        2.




                                                                                                                                                                        4.
                                                                                                                                                                       pa




                                                                                                                                                                      vo
                                                                                                                                                                       1.

                                                                                                                                                                       cr
                                                                                                                                                                       4.

                                                                                                                                                                     17




                                                                                                                                                                    ER
                                                                                                                                                                     0.
incurred during execution. (Figure 4) For gcc, parser,




                                                                                                                                                                    17




                                                                                                                                                                    25




                                                                                                                                                                    25




                                                                                                                                                                     6.
                                                                                                                                                                    18

                                                                                                                                                                    6.




                                                                                                                                                                   pe
                                                                                                                                                                    7.
                                                                                                                                                             16




                                                                                                                                                                    5.



                                                                                                                                                                 30
                                                                                                                                                                 25
                                                                                                                                                                 18

                                                                                                                                                                19




                                                                                                                                                                25




                                                                                                                                                               AV
                                                                                                                                                                 3.
                                                                                                                                                              25
gap,      and     vortex,   increasing     if-conversion
aggressiveness increased the number of Icache misses.                                                       Figure 5. Relative number of branch instructions
For gzip, mcf, perlbmk, bzip2, and twolf, DEF if-                                                                          retired (NONE = 1.0)
conversion level caused the fewest L1I cache misses
(more than 10% fewer in some cases).                                                                                                                                         % CPU cycles spent servicing branch misprediction

                                              Number of L1 I-cache misses
                                                                                    NONE   DEF   MAX                                                                                                                             NONE    DEF   MAX
   Ratio to NONE if-conversion level




                                                   1.58               1.44   2.39                                                                             12%
                                       1.30



                                                                                                                                     % of total CPU cycles
                                                                                                                                                              10%
                                       1.20
                                                                                                                                                                  8%
                                       1.10
                                                                                                                                                                  6%
                                       1.00
                                                                                                                                                                  4%
                                       0.90
                                                                                                                                                                  2%
                                       0.80
                                                                                                                                                                  0%
                                       0.70
                                                                                                                                                                                            r
                                                                                                                                                                      ip




                                                                                                                                                                                          er

                                                                                                                                                                                           n




                                                                                                                                                                                           p

                                                                                                                                                                                           x

                                                                                                                                                                                           2
                                                                                                                                                                                           c




                                                                                                                                                                                          E
                                                                                                                                                                                          cf

                                                                                                                                                                             19 fty




                                                                                                                                                                                           k




                                                                                                                                                                                           f
                                                                                                                                                                                        vp




                                                                                                                                                                                         ol
                                                                                                                                                                                        gc




                                                                                                                                                                                       ga

                                                                                                                                                                                       rte
                                                                                                                                                                                       eo




                                                                                                                                                                                        ip
                                                                                                                                                                                        m




                                                                                                                                                                                     AG
                                                                                                                                                                    gz




                                                                                                                                                                                       rs
                                                                                                                                                                                       m




                                                                                                                                                                                     tw
                                                                                                                                                                                       a




                                                                                                                                                                                     bz
                                                                                                                                                                                     5.




                                                                                                                                                                                    rlb
                                                                                                                                                                                     6.




                                                                                                                                                                                     2.




                                                                                                                                                                                     4.
                                                                                                                                                                                    pa




                                                                                                                                                                                   vo
                                                                                                                                                                                    1.

                                                                                                                                                                                    cr
                                                                                                                                                                  4.
                                                         r
                                                       ip




                                                       er

                                                        n




                                                        p

                                                        x

                                                        2
                                                        c




                                                        E
                                                       cf

                                                       ty




                                                        k




                                                        f




                                                                                                                                                                       17




                                                                                                                                                                                 ER
                                                                                                                                                                                  0.
                                                                                                                                                                            17




                                                                                                                                                                                 25




                                                                                                                                                                                 25




                                                                                                                                                                                  6.
                                                     vp




                                                                                                                                                                                 18

                                                                                                                                                                                 6.
                                                      ol




                                                                                                                                                                                pe
                                                                                                                                                                                 7.
                                                     gc




                                                                                                                                                              16
                                                    ga

                                                    rte
                                                    eo




                                                     ip
                                                     m




                                                                                                                                                                                 5.
                                                  AG
                                                   gz




                                                    rs
                                                    m

                                                    af




                                                                                                                                                                              30
                                                                                                                                                                              25
                                                                                                                                                                              18
                                                  tw
                                                  bz
                                                  5.




                                                 rlb




                                                                                                                                                                             25




                                                                                                                                                                            AV
                                                                                                                                                                              3.
                                                  6.




                                                  2.




                                                  4.
                                                 pa




                                                vo
                                                 1.

                                                 cr
                                                 4.

                                               17




                                              ER
                                               0.




                                                                                                                                                                           25
                                              17




                                              25




                                              25




                                               6.
                                              18

                                              6.




                                             pe
                                              7.
                                       16




                                              5.



                                           30
                                           25
                                           18

                                          19




                                          25




                                         AV
                                           3.
                                        25




                                                                                                           Figure 6. Percentage of CPU cycles spent servicing
  Figure 4. Relative number of L1I cache misses                                                                           branch misprediction
                   (NONE = 1.0)
                                                                                                               Figure 6 shows the percentage of cycles spent
    In summary, on average, the MAX level produces                                                         servicing branch mispredictions computed by
the smallest static code size while the NONE level                                                         multiplying the number of branch mispredictions by
retires the least number of instructions (as there are no                                                  the misprediction penalty on the Itanium processor (10
extra predicated-off instructions). The DEF level                                                          cycles). We see that there is a substantial reduction in
incurs the fewest L1I cache misses with slight                                                             percent of CPU cycles due to branch mispredictions
increases in dynamic instruction count. This indicates                                                     for all benchmarks except perlbmk. In Section 5, we
that by combining multiple control paths following a                                                       will explain perlbmk’s behavior. On average, the DEF
branch, the default level if-conversion results in more                                                    level if-conversion reduces branch misprediction
effective I-cache prefetching while not significantly                                                      cycles by 20% and MAX by 27%. However, as
increasing the footprint of the original code.                                                             expected, overall execution time spent in servicing
4.3 Branch Behavior                                                                                        mispredicted branches decreases with increasing
                                                                                                           aggressiveness, varying from 0.2 % to 5% at DEF and
    Figure 5 shows the total number of branches                                                            from 0.2% to 7% at MAX.
executed for each benchmark at different levels of if-
conversion aggressiveness. In some benchmarks, as                                                          4.4 Compiler Effects
if-conversion level increases, successful branch                                                               Currently, ECC’s register allocator is not fully
elimination by if-conversion reduces the number of                                                         aware of predicate relationships. While predication
branches retired. However, for gzip, gcc, crafty,                                                          should not generally increase the use of general-
parser, and perlbmk, the number of branches retired                                                        purpose registers, in some cases, ECC allocates more
increases. This can be attributed to the fact that                                                         registers than necessary.
unconditional calls, indirect branches, and returns in
secondary control paths, which are not executed at the
NONE level, are being predicated and pulled into the



                                                                                                       6
,                                 % CPU cycles spent servicing RSE activity
                                                                                                    benchmarks. Individual branches are classified either
                                                                             NONE   DEF   MAX
                                                                                                    as one of eleven different types of branches that
                                         12.89% 18.29%             41.96%
                           10%                                                                      cannot be removed via standard application of if-
                            9%
                                                                                                    conversion or as belonging to the “Other IP-relative”
   % of total CPU cycles




                            8%
                            7%
                            6%                                                                      category.
                            5%
                            4%
                            3%
                                                                                                                                  % of total number of
                            2%                                                                                                                                                         average % of
                            1%
                                                                                                                                        branches                         % of total
                                                                                                                                                         misprediction                  CPU cycles
                            0%                                                                        Branch type (NONE if-                                            mispredictions
                                                                                                                                                          rate of each                spent servicing
                                                                                                        conversion binary)                   dynamic                     due to the
                                                                                                                                  static                  branch type                     branch
                                            r
                                          ip




                                          er

                                           n




                                           p

                                           x

                                           2
                                           c




                                           E
                                          cf

                                          ty




                                           k




                                           f
                                        vp




                                         ol
                                        gc




                                       ga

                                       rte
                                       eo




                                        ip
                                        m




                                     AG
                                      gz




                                       rs
                                                                                                                                                                        branch type
                                       m

                                       af



                                                                                                                                            (sampling)




                                     tw
                                     bz
                                     5.




                                    rlb
                                     6.




                                     2.




                                     4.
                                    pa




                                   vo
                                    1.

                                    cr
                                    4.




                                                                                                                                                                                       misprediction
                                  17




                                 ER
                                  0.
                                 17




                                 25




                                 25




                                  6.
                                 18

                                 6.




                                pe
                                 7.
                      16




                                 5.




                              30
                              25
                              18

                             19




                             25




                            AV
                              3.
                           25
                                                                                                              Nop.b               2.66%
                                                                                                             Indirect call        0.64%          0.62%       43.19%          3.80%            0.28%
                                                                                                     Call
   Figure 7. Percentage of CPU cycles spent in                                                               IP-relative call     23.47%         3.42%        0.25%          0.12%            0.01%
 servicing RSE activity versus if-conversion level                                                            Return              6.68%          3.91%        9.65%          5.39%            0.31%
                                                                                                             Counted
                                                                                                             (br.cloop,           0.92%          6.39%        9.78%          8.92%            0.74%
    Figure 7 shows the estimated percent of execution                                                        br.ctop, br,cexit)
time spent servicing register stack engine (RSE)                                                     Loops
                                                                                                              IP-relative loop
                                                                                                                                  2.94%        15.86%         6.06%         13.72%            1.01%
requests (spilling/filling registers during function                                                          back
                                                                                                              IP-relative loop
call/return sequences)1, which is a good indication of                                                        exit
                                                                                                                                  2.58%          8.01%        6.22%          7.11%            0.43%

how well the compiler, did at register allocation. As                                                         Indirect
                                                                                                                                  0.12%          0.34%       41.35%          2.01%            0.21%
                                                                                                              unconditional
shown in Figure 7, the percent of time spent in                                                     Indirect
                                                                                                              Indirect
                                                                                                                                  0.00%          0.00%                       0.00%            0.00%
servicing RSE traffic is quite substantial at higher                                                          conditional
                                                                                                     IP-relative conditional
levels of if-conversion in some benchmarks. Once this                                                         recovery
                                                                                                                                  1.53%          0.00%        0.00%          0.00%            0.00%
                                                                                                             IP-relative
limitation in ECC is fixed, the absolute performance                                                       unconditional
                                                                                                                                  25.11%         6.63%        2.59%          2.45%            0.17%
gain      with    if-conversion     should    improve                                                Subtotal for classified
                                                                                                                                  66.64%       45.18%                       43.53%            3.15%
proportionally.                                                                                            branches
                                                                                                       Other IP-relative          33.28%       54.81%         7.22%         56.47%            3.77%
                                                                                                             Sum                    100%         100%                         100%            6.92%

5.   Experimental Results – Inherent                                                                     Table 2. Average branch behavior by type for
                                                                                                                        NONE binaries
Control Flow Characteristics
    While the results in Section 4 concentrate on the                                                   Table 2 shows that eleven types of irremovable
changes in basic program characteristics at varying                                                 branches account for 67% of the static branches, 45%
levels of if-conversion, this section focuses on the                                                of the dynamic branches, and 44% of the program’s
inherent properties and control flow structures of the                                              mispredictions.
benchmarks. Through a combination of use of                                                             In theory, it is possible to remove some of the
compiler      annotations,   performance     hardware                                               mispredictions associated with branches that we have
feedback, and post-processing tools, we have                                                        classified as irremovable. However, in practice it is
characterized the inherent control flow structures of                                               either difficult or not profitable to do so. For example,
the programs by the number, type, distribution,                                                     the conditional calls that remain (the compiler has
predictability, and context of branches in the source                                               already performed interprocedural inlining where we
programs. We use this data to establish an upper                                                    thought profitable) could be completely removed via
bound on the improvements that if-conversion can                                                    inlining and predication. However, unless the called
achieve by reducing branch-mispredictions.                                                          subroutine itself contains no difficult-to-predicate
                                                                                                    instructions (such as calls, indirect branches, loops, or
5.1 Branch Type Analysis                                                                            unpredicatable instructions), it may not be possible to
    In this subsection, we examine the type and                                                     effectively remove the mispredictions associated with
control-flow properties of branches, identifying those                                              the call. Thus, our definition of irremovable branches
that are not removable by if-conversion. Table 2                                                    generally only refers to the mispredictions caused by
summarizes the distribution of branches and                                                         branches, rather than whether the branch itself is
mispredictions in NONE binaries according to their                                                  theoretically removable.
branch types. Dynamic data are based on runtime                                                         In Table 2, the “Other IP-relative” row accounts
sampled event data and are averaged across the                                                      for all the branches that do not fall into one of those
                                                                                                    irremovable categories – these are the branches that
                1                                                                                   form the set of branches that might be removable via
       Based on anecdotal evidence gathered from kernels and
knowledge of the Itanium processor microarchitecture, each RSE                                      if-conversion. These branches account for 56% of all
load/store pair is estimated to take 2 cycles.                                                      mispredictions, and provide a bound on the number of
                                                                                                    mispredictions that can be removed via if-conversion,


                                                                                                7
,with some caveats. First, unconditional IP-relative                                    indirect non-call branches, and architecturally
branches are removed as a side-effect of if-conversion                                 unpredicatable instructions (alloc, flushrs, loadrs, rfi,
or block ordering. Since they cause very few of the                                    bsw, clrrrb, cover, epc). We say a branch controls one
mispredictions (2.5%), their removal is not generally                                  of these types of instructions when no acyclic path
going to have large impact on branch prediction.                                       from the branch to the instruction in question passes
Second, our results are based on the Itanium processor                                 through any instruction that post-dominates the branch
branch predictor, and different branch predictors may                                  (this is effectively a definition of control-dependence).
give different results.                                                                Furthermore, such control is said to be direct control
                                                                                       when no acyclic path passes through another
                 % MP due to       % MP due to    % MP due to non- % MP due to
                                                                                       conditional branch before reaching the instruction in
   Benchmarks      "Other IP-      counted loop    counted loop-    all indirect       question. Indirect control is a branch with control that
                relative" branch      branch       related branch     branch
                                                                                       is not direct control.
164.gzip                76.5%             1.8%             21.0%           0.0%            Branches that directly control unpredicatable
175.vpr                 74.6%            11.6%             12.9%           0.0%
176.gcc
                                                                                       instructions cannot be removed without altering
                        50.0%             9.4%             19.4%          10.0%
181.mcf                 49.6%             0.0%             48.9%           0.0%        program behavior. Branches that control call, indirect,
186.crafty              61.2%             3.0%             17.9%           4.4%        and return branches can be removed via if-conversion,
197.parser              51.7%             4.7%             32.9%           0.0%
252.eon
                                                                                       but the controlled call, indirect branch, or return will
                        62.9%             0.0%              7.7%          12.7%
253.perlbmk             15.6%            13.5%              9.7%          54.7%        then simply inherit the predicate from the removed
254.gap                 34.9%            26.2%             17.5%          13.6%        branch. If this happens, directional mispredictions
255.vortex              66.9%             0.2%              8.3%           4.8%
256.bzip2
                                                                                       from the parent will almost certainly transfer to the
                        52.3%            11.6%             29.2%           0.0%
300.twolf               54.4%            20.7%             20.4%           0.0%        child call, indirect, or return branch. If multiple calls
    Table 3. Misprediction statistics for selected                                     or indirect branches are controlled, it is possible that
                   branch types                                                        predication will even increase the number of
                                                                                       mispredictions by effectively replicating the
    Table 3 shows that the misprediction statistics vary                               mispredicting condition on several branches.
greatly by benchmark. For example, while the number
of mispredictions due to “Other IP-relative” branches                                                    % o f in stru ction s b y calls     % o f m isp red ictio n d u e to call
                                                                                                          an d in d irect bran ch es              and in d irect b ran ch es
is 76% in gzip, it is only 15% for perlbmk. A close                                                      N o P rd  B A SE       A g g P rd    N o P rd     B A SE      A g g Prd
                                                                                         B en ch m ark
look shows that a very large percentage of                                                               B in ary  B in ary     B in ary      B in ary     B in ary    B in ary
                                                                                       164.gzip            1 .3 3%   1 .3 2 %     2 .9 4%       0 .5 2%      4 .1 7%    1 2 .10 %
mispredictions in perlbmk (55%) are due to branch                                      175.vpr             1 .3 2%   1 .5 3 %     4 .8 7%       0 .0 0%      0 .0 0%      0 .02 %
target mispredictions from indirect branches, which                                    176.gcc             3 .9 3%   4 .4 5 %                 1 0 .1 9%    1 4 .4 7%
                                                                                       181.mcf             0 .1 5%   0 .3 0 %     0 .3 0%       0 .8 4%      2 .6 7%      3 .14 %
are not directly removable via predication (our                                        186.crafty          3 .4 3%   4 .9 5 %     9 .6 2%       4 .3 8%      8 .7 2%    1 1 .51 %
compiler already peels out common cases from                                           197.parser          5 .2 4%   6 .5 4 %   1 3 .3 9%       0 .1 2%      1 .9 9%      3 .83 %
                                                                                       252.eon           1 0 .4 5% 1 6 .0 7 %   2 4 .7 3%     1 2 .7 2%    2 6 .7 9%    3 2 .84 %
switches, but does not directly attempt to peel                                        253.perlbmk       1 0 .9 1% 1 1 .6 1 %   2 5 .1 4%     5 4 .7 8%    5 7 .9 8%    6 6 .27 %
mispredicting cases).                                                                  254.gap             5 .9 7%   8 .1 3 %   1 2 .3 9%     1 3 .6 8%    1 7 .3 0%    2 4 .48 %
    Surprisingly, even though the Itanium processor                                    255.vortex          4 .6 7%   5 .4 1 %   1 1 .6 9%       4 .7 9%      9 .2 7%    2 7 .11 %
                                                                                       256.bzip2           2 .6 2%   2 .6 5 %   1 4 .1 2%       0 .0 0%      0 .0 0%      0 .27 %
has a dedicated predictor for counted loops, a large                                   300.twolf           1 .0 5%   1 .4 9 %     2 .2 7%       0 .0 0%      0 .0 0%      0 .43 %
percentage of mispredictions still occur. This is most                                 Table 4. Percentage of calls and indirect branches
likely due to the fact that the processor must fetch 6 or                                      executed and their mispredictions
7 cache lines of instructions between when the loop
count register is set and when the loop terminates in                                      Likewise, the mispredictions associated with a
order for the predictor to be accurate. Except in the                                  branch that directly controls a loop (the loop branch
cases of eon and vortex, loop-related branches account                                 and its body) cannot practically be removed via if-
for 20% to 50% of all mispredictions.                                                  conversion because the loop back branch would then
    This shows that substantial portions of the                                        become part of the predicated region and
mispredictions in some benchmarks cannot be                                            mispredictions could migrate to it from the parent. In
removed by if-conversion due to the fundamental                                        Table 4, we can see misprediction migration as the if-
nature of the code. In the next section, we will refine                                conversion level increases by noticing that the
the bound on the set of mispredictions that are                                        percentage of calls and indirect branches executed
removable via if-conversion.                                                           generally increases.
                                                                                           Similar discussion applies to branches with
5.2 Control Based Classification                                                       indirect control, but is more difficult to draw firm
    In this subsection, we sub-classify “Other IP-                                     conclusions. While it is possible to remove some
relative conditional branches” by the instructions that                                branches with indirect control, it is possible that all or
are control dependent on them. We are interested in                                    some of the mispredictions associated with the original
five specific types of instructions: calls, returns, loops,                            parent will migrate to the controlled branches. Thus,



                                                                                   8
,branches with indirect control sometimes can be if-                                             as dependence height, resource height, code size, and
converted, but the resulting misprediction behavior of                                          predicate register usage that may make predication
the formerly controlled branches is difficult to analyze                                        undesirable in a given situation. On a per-benchmark
statically.                                                                                     basis, Table 6 shows that the percent of mispredictions
                                                                                                due to “Does not control, Other IP-relative branches”
                                                                                                is relatively small and, on average, contributes 28% of
                          % of total number of                            average % of
  Control Info of
                                branches       misprediction % of total    CPU cycles           mispredictions accounting for 2% of the overall
 "Other IP-relative"
     branches                         dynamic
                                                   rate      mispredicts spent servicing        execution cycles. If we included “indirectly-controlled
                           static                                        mispredictions
                                    (sampling)                                                  IP-relative branches”, this would account for 41% of
Some direct control       15.36% 17.18%           5.73%       14.06%         0.98%
    Loop entry              1.78%        2.52%        9.60%      3.46%            0.22%
                                                                                                mispredictions and 3% of overall execution time.
    Loop exit               1.75%        5.29%        8.73%      6.60%            0.55%             According to Table 6, the CPU cycle reduction
    Call                  10.91%         9.23%        3.21%      4.23%            0.24%         possible due to reducing branch mispredictions by
    Indirect branch         0.10%        0.36%        2.92%      0.15%            0.01%
    Return                  3.83%        3.16%        6.67%      3.01%            0.16%         applying if-conversion on the Itanium processor is
    Unpredicatable          0.00%        0.00%        0.00%      0.00%            0.00%         about 2-3%. However, this number does not account
Indirect control only      9.97%      16.98%      5.40%       13.08%         0.88%
    Loop entry              4.71%        8.23%        6.66%      7.83%            0.53%
                                                                                                for potential reductions in capacity or conflict misses
    Loop exit               1.29%        2.01%        0.35%      2.75%            0.17%         in predictors but does provide an upper bound based
    Call                    7.12%       10.60%        4.48%      6.77%            0.46%         on the predictability of specific branches. As pointed
    Indirect branch         0.37%        0.33%       16.70%      0.78%            0.06%
    Return                  2.53%        2.37%        7.28%      2.46%            0.15%         out in the related research summary, there are many
    Unpredicatable          0.00%        0.00%        0.00%      0.00%            0.00%         other possible uses for prediction beyond if-
Does not control           7.94%      20.66%      9.95%       29.33%         1.92%
Subtotal for "Other IP-
                                                                                                conversion. Thus, it would be a mistake to assume
                          33.28%     54.81%                      56.47%            3.77%        that 2-3% is the maximum potential performance gain
relative"
Classified branches    66.64%        45.18%                      43.53%            3.15%        for predication as a whole.
                   Sum 100%           100%                        100%             6.92%
     Table 5. Branch behavior based on its control
                    (direct/indirect)                                                           6. Conclusions
                                    Other IP-relative branch (rem ovable branch)
                                                                                                    This study presents the first data analyzing the
      B enchm arks                   no control                 indirect control only           impact of if-conversion on real hardware and
                               % total       % total C PU      % total       % total C PU
                           m isprediction       cycles      m isprediction       cycles
                                                                                                production software. We distinguish between if-
 164.gzip                          30.09%          2.82%           16.97%           1.59%       conversion and predication by noting that if-
                                   49.79%          3.32%           16.86%           1.12%
 175.vpr
 176.gcc                            9.37%          0.70%           23.22%           1.75%
                                                                                                conversion is but one of several uses for predication.
 181.mcf                           33.78%          0.45%           10.08%           0.13%       Our study only addresses if-conversion, although both
 186.craft y                       33.65%          3.30%           13.11%           1.29%       others’ and our own results show predication provides
 197.parse r                        3.22%          0.27%           13.82%           1.18%
 252.eon                           29.27%          1.89%            8.62%           0.56%       substantial     benefit   for    software    pipelining,
 253.perlb mk                       2.09%          0.17%            6.20%           0.51%       improvements in instruction stream behavior, and
 254.gap                           15.58%          0.61%           14.02%           0.55%
 255.vorte x                       28.23%          0.33%           28.66%           0.33%
                                                                                                ability to perform more advanced code motion.
 256.bzip2                         13.09%          1.18%           18.09%           1.63%           The data presented in this study provides a realistic
 300.twolf                         48.45%          5.46%            5.73%           0.65%       evaluation of how if-conversion affects program
 AVER AGE                          29.33%          1.92%           13.08%           0.88%
     Table 6. Branch misprediction information for                                              execution while helping to establish some fundamental
            potentially removable branches                                                      limits on the impact of if-conversion. We have also
                                                                                                presented data showing how code size, register
    Table 5 2 breaks down branches based on their                                               pressure, and branch behavior are impacted by if-
control characteristics. “Some direct control” includes                                         conversion in greater details and in more realistic
any branch that directly or indirectly controls one of                                          conditions than has been previously possible.
the six categories of controlled instructions,                                                      Although this work and previous research have
“Indirectly control only” includes those branches that                                          demonstrated that if-conversion is very effective at
have indirect control, but no direct control, and the                                           removing branches and mispredictions, our results
“Does not control” category includes those branches                                             show that differences in compiler technology,
that have no direct or indirect control over any of the                                         hardware resources, and benchmark behavior
six categories.                                                                                 substantially affect the conclusions of prior estimates
    “Does not control” branches and their                                                       of if-conversion potential. However, in the future,
mispredictions are completely removable via if-                                                 further changes in workload or microarchitecture
conversion, although there are a variety of factors such                                        could substantially change the importance of the
                                                                                                findings in this paper again. Since follow-on
      2                                                                                         implementations of the Itanium processor are likely to
       The sub-categories do not sum to the row totals because they
overlap with each other (one branch could control both a return and
                                                                                                have bigger caches and the ILP compilation
a call).                                                                                        techniques that exploit other Itanium features are


                                                                                            9
,becoming more mature, the portion of execution time                  [9] Gary Scott Tyson. The effects of predicated execution
dominated by branch penalty will likely grow. In fact,                    on branch prediction. Proceedings of the 27th annual
                                                                          international symposium on Microarchitecture, pages
this effect partially accounts for why prior academic                     196-206, 1994.
studies saw a larger improvement from if-conversion –                [10] Alexandre Eichenberger, Waleed Meleis, and Suman
they assumed that non-branch related factors were                         Maradani. An integrated approach to accelerate data
                                                                          and     predicate     computations      in   hyperblocks.
smaller than what we have seen on the Itanium                             Proceedings of the 33rd annual IEEE/ACM
processor for SPEC2000CINT.                                               international symposium on Microarchitecture, pages
    Finally, we note that predication has major impact                    101–111, 2000.
on applications that have substantial time in software                [11] David M. Gillies, Dz-ching Roy Ju, Richard Johnson,
                                                                          and Michael Schlansker. Global predicate analysis and
pipelined loops or that have a very substantial                           its application to register allocation. Proceedings of the
component of time spent in servicing mispredictions.                      29th annual IEEE/ACM international symposium on
For applications that are Icache-limited, if-conversion                   Microarchitecture, pages 114–125, 1996.
                                                                     [12] Jay Bharadwaj, Kishore Menezes, and Chris McKinsey.
combined with profile-feedback directed layout look                       Wavefront scheduling: path based data representation
promising and we expect research to examine this area                     and scheduling of subgraphs. Proceedings of the 32nd
in depth. Because of these fundamental differences in                     Annual ACM/IEEE international symposium on
application codes, we expect to continue to see the                       Microarchitecture, pages 262–271, 1999.
                                                                     [13] D. N. Pnevmatikatos and G. S. Sohi. Guarded execution
impact of predication vary widely across benchmarks                       and branch prediction in dynamic ILP processors.
and microarchitectures.                                                   Proceedings of the 21ST annual international
                                                                          symposium on Computer architecture, pages 120-129,
                                                                          1994.
7. References                                                        [14] W. A. Havanki, S. Banerjia, T. M. Conte. Treegion
                                                                          scheduling for wide issue processors. Proceedings of
[1] Intel Corporation. Intel® Itanium™ Architecture                       the Fourth International Symposium on High-
      Software Developer’s Manual. Available from                         Performance Computer Architecture, pages 266-276,
      http://developer.intel.com/design/ia-64/manuals/, July              1998.
                                                                     [15] N. J. Warter, D. M. Lavery, and W. W. Hwu. The
      2000.                                                               benefit of predicated execution for software pipelining.
[2] Intel Corporation. Itanium™ Processor Microarchitecture               Proceeding of the Twenty-Sixth Hawaii International
      Reference for Software Optimization. Available from                 Conference on System Sciences, Vol. I, pages 496-506,
      http://developer.intel.com/design/ia-64/manuals/,                   1993.
      August 2000.                                                   [16] James C. Dehnert, Peter Y.-T. Hsu, and Joseph P. Bratt.
[3] Intel Corporation. Flexible Annotations API                           Overlapped loop support in the Cydra 5. Proceedings of
      Programming           Guide.       Available      from              the third international conference on Architectural
      http://developer.intel.com/software/product/opensource              support for programming languages and operating
      /tools/perftools.htm, June 2001.                                    systems, pages 26-38, 1989.
[4] Scott A. Mahlke, Richard E. Hank, Roger A. Bringmann,            [17] R. Johnson, M. Schlansker. Analysis Techniques for
      John C. Gyllenhaal, David M. Gallagher, and Wen-mei                 Predicated Code. Proceedings of the 29th Annual
      W. Hwu. Characterizing the impact of predicated                     IEEE/ACM           International      Symposium         on
      execution on branch prediction. Proceedings of the 27th             Microarchitecture, pages 100–113, 1996.
      annual international symposium on Microarchitecture,           [18] B. R. Rau, D.W.L. Yen, W. Yen, R.A. Towle. The
      pages 217–227, 1994.                                                Cydra 5 departmental supercomputer. IEEE Computer,
[5] Srinivas Mantripragada and Alexandru Nicolau. Using                   pages 12-35, January 1989.
      profiling to reduce branch misprediction costs on a            [19] P.G. Lowney, et. al. The Multiflow trace scheduling
      dynamically scheduled processor. Proceedings of the                 compiler. The Journal of Supercomputing, Vol. 7,
      2000 international conference on Supercomputing,                    pages 51-142, January 1993.
      pages 206–214, 2000.                                           [20] P.Y. Chang, E. Hao, Y. Patt. Using predicated
[6] Scott A. Mahlke, David C. Lin, William Y. Chen,                       execution to improve the performance of a dynamically
      Richard E. Hank and Roger A. Bringmann. Effective                   scheduled machine with speculative execution.
      compiler support for predicated execution using the                 Proceedings of the International Conference on Parallel
      hyperblock. Proceedings of the 25th annual                          Architectures and Compilation Techniques, 1995.
      international symposium on Microarchitecture, pages            [21] R.M. Russel. The CRAY-1 computer system. CACM,
      45-54, 1992.                                                        Vol. 21, pages 63-72, January 1978.
[7] David I. August, Daniel A. Connors, Scott A. Mahlke,             [22] J. R. Allen, K. Kennedy, C. Porterfield, J. Warren.
      John W. Sias, Kevin M. Crozier, Ben-Chung Cheng,                    Conversion of control dependence to data dependence.
      Patrick R. Eaton, Qudus B. Olaniran and Wen-mei W.                  Proceedings of the 10th ACM Symposium on
      Hwu. Integrated predicated and speculative execution                Principles of Programming Languages, pages 177–189,
      in the IMPACT EPIC architecture. Proceedings of the                 1983.
      25th annual international symposium on Computer
      architecture, pages 227-237, 1998.
[8] Scott A. Mahlke, Richard E. Hank, James E.
      McCormick, David I. August and Wen-Mei W. Hwu. A
      comparison of full and partial predicated execution
      support for ILP processors. Proceedings of the 22nd
      annual international symposium on Computer
      architecture, pages 138-150, 1995.




                                                                10
